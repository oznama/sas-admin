buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "http://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts/"
            allowInsecureProtocol = true
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'
}

repositories {
    mavenCentral()
    maven {
        url "http://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts/"
        allowInsecureProtocol = true
    }
}

dependencies {
    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')

    implementation(
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-thymeleaf',
            'org.springframework.boot:spring-boot-starter-mail'
    )

    implementation(
            "org.postgresql:postgresql:${postgresConnectoVersion}",
            "io.springfox:springfox-boot-starter:${springFoxVersion}",
            "io.springfox:springfox-swagger-ui:${springFoxVersion}",
            "io.jsonwebtoken:jjwt:${jwtsVersion}",
            "org.apache.commons:commons-io:${apacheCommonsIoVersion}",
            "com.vladmihalcea:hibernate-types-55:${hibernateTypesVersion}",
            "org.flywaydb:flyway-core",
            "org.apache.poi:poi:${apachePoiVersion}",
            "org.apache.poi:poi-ooxml:${apachePoiVersion}",
            "net.sf.jasperreports:jasperreports:${jaspereportVersion}",
            "net.sf.jasperreports:jasperreports-fonts:${jaspereportVersion}"
    )

    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    implementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation("com.h2database:h2:${h2Version}")
    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))
    testImplementation('org.junit.jupiter:junit-jupiter')

}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

springBoot {
    buildInfo {
        properties {
            artifact = rootProject.name
            version = version
            group = group
            name = 'SAS Admin API'
            additional = [
                    'description': 'Microservicios de SAS Administrador'
            ]
        }
    }
}

def Properties localBootRunProperties() {
    Properties p = new Properties();
    p.load(new FileInputStream(
            file(project.projectDir).absolutePath + "/src/test/resources/env-test.properties"))
    return p;
}

bootRun {
    doFirst {
        bootRun.systemProperties = localBootRunProperties()
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

def dockerImageName = "${dockerRegistryOwner}/${project.name}:${project.version}"

bootBuildImage {
    imageName = dockerImageName
}